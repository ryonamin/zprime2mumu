The codes here are expected to be used for analyzing the data
generated by IIHETree framework (https://github.com/iihe-cms-sw/IIHETree).

1) Structure
 run      : Working directory. Put your ROOT macros.
            MyAnalyzer_skeleton.C is a template for your new macros.
            run.C is a run script to compile/run your analyzer macros.
            Edit run.C when you add new macros.
 src      : Packages to be compiled and used in "run" directory. 

 No need to change the following files/directories. 
 setup.sh : Setup script 
 lib      : The libraries made in src will be copied to this directory.
 include  : The include files copied from src. This is necessary for ROOT macros.
 Makefile : make       --> make all subdirectories under src.
            make clean --> clean lib, include, and all subdirectores under src. 

2) How to setup (Only tested on Mac OSX10.9)
 $ source $(ROOTSYS)/bin/thisroot.sh
 $ source setup.sh
 $ make
 For clean up,
 $ make clean

3) How to run
 $ cd run
 $ root -l run_Zprimeloop.C
 or
 $ root -l run.C

4) More details for each package

 1) TreeHandler
    Basically this is just a wrapper of TTree, but this has
    each branch as member variable.
    This makes life easier especially if you want to access from several objects.
    The basic idea is :
    1) Make an instance in your ROOT macro. You have to give a TTree pointer as
       an argument of the constructor.
    2) Note that TreeHandler does "SetBranchAddress()" in the constructor.
    3) Access the member variables (e.g. vector<float> muon_pt) 

    Example code )
      TFile fin("ZpMM----.root");
      TreeHandler T(fin.Get("IIHEAnalyses"));
      for ( int ev = 0; ev < T.GetEntries(); ev++ ) {
        T.GetEntry(0);
       
        for ( int ipt = 0; ipt < T.muon_pt->size(); ipt++ ) { //T.muon_pt = vector<float*> muon_pt
          float pt = T.muon_pt->at(ipt);
          ...
        }
      }

  2) Util
     Extra functions for common use.

  3) MCParticleFinder
    This can be used for searching a MC Particle correspoinding the reco particle you're looking at.
    The idea is to search a particle having similar pt, eta, phi.
    How to use:
    1) Make an instance before event loop.
    2) Set N sigma (error of pt,eta,phi) to define the search-window.
    3) Call a function getMatchedMCId(ip), where ip is an index that is used in std::vector.  
       The return value is an index for the MCParticle collection.

  4) MCDimuonReco
    Reconstruct dimuons in MC Particle collection
    How to use :
    1) Call findHighPtDimuon() to find the pair of the leading and sub-leading high pt.
    2) Call getDimuonMass() to get the invariant mass. 
